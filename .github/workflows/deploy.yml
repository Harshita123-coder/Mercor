name: Deploy to ECS on EC2

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "README.md"
  workflow_dispatch:  # Allow manual trigger

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mercor-ecs-demo

jobs:
  deploy:
    name: Deploy to ECS on EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.2.3"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Use existing infrastructure (bypass Terraform state issues)
        id: infra
        run: |
          # Use known values from our working infrastructure
          echo "ALB=mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com" >> $GITHUB_OUTPUT
          echo "CLUSTER=mercor-demo-cluster" >> $GITHUB_OUTPUT
          echo "ECR_URL=533567530547.dkr.ecr.us-east-1.amazonaws.com/mercor-ecs-demo" >> $GITHUB_OUTPUT
          
          # Get task execution role ARN
          EXEC_ROLE=$(aws iam get-role --role-name mercor-demo-task-exec --query 'Role.Arn' --output text)
          echo "EXEC=$EXEC_ROLE" >> $GITHUB_OUTPUT
          
          echo "✅ Using existing infrastructure:"
          echo "🌐 ALB: mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"  
          echo "🏗️ Cluster: mercor-demo-cluster"
          echo "🐳 ECR: 533567530547.dkr.ecr.us-east-1.amazonaws.com/mercor-ecs-demo"

      - name: Register new task definition revision
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          EXEC_ROLE_ARN: ${{ steps.infra.outputs.EXEC }}
        run: |
          # Create EC2-compatible task definition
          IMG="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          cat > ec2-taskdef.json << EOF
          {
            "family": "mercor-demo-task",
            "networkMode": "bridge",
            "requiresCompatibilities": ["EC2"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "$EXEC_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "app",
                "image": "$IMG",
                "essential": true,
                "portMappings": [{"containerPort": 8080, "hostPort": 0}],
                "environment": [{"name": "APP_MSG", "value": "Hello from EC2 Blue/Green deployment!"}],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/mercor-demo",
                    "awslogs-region": "$AWS_REGION",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
          
          # Register the new task definition
          TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://ec2-taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV
          echo "New EC2 task definition: $TASK_ARN"

      - name: Deploy using CodeDeploy (Blue/Green)
        env:
          CLUSTER: ${{ steps.infra.outputs.CLUSTER }}
        run: |
          echo "🔄 Deploying using CodeDeploy for Blue/Green deployment"
          
          # Create CodeDeploy deployment configuration
          cat > deploy-config.json << EOF
          {
            "applicationName": "mercor-demo-cd-app",
            "deploymentGroupName": "mercor-demo-dg",
            "revision": {
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "{\n  \"version\": 0.0,\n  \"Resources\": [\n    {\n      \"TargetService\": {\n        \"Type\": \"AWS::ECS::Service\",\n        \"Properties\": {\n          \"TaskDefinition\": \"$TASK_ARN\",\n          \"LoadBalancerInfo\": {\n            \"ContainerName\": \"app\",\n            \"ContainerPort\": 8080\n          }\n        }\n      }\n    }\n  ]\n}"
              }
            },
            "deploymentConfigName": "CodeDeployDefault.ECSAllAtOnce",
            "description": "Automated deployment from GitHub Actions"
          }
          EOF
          
          # Create CodeDeploy deployment
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --cli-input-json file://deploy-config.json \
            --query 'deploymentId' \
            --output text)
          
          echo "📝 CodeDeploy deployment started: $DEPLOYMENT_ID"
          echo "🔍 Monitor deployment: https://console.aws.amazon.com/codesuite/codedeploy/deployments/$DEPLOYMENT_ID"

      - name: Display deployment info
        run: |
          echo "✅ CodeDeploy Blue/Green Deployment Summary:"
          echo "🌐 Load Balancer: ${{ steps.infra.outputs.ALB }}"
          echo "🐳 New Task Definition: $TASK_ARN"
          echo "🏗️  Infrastructure: EC2-based ECS with CodeDeploy"
          echo "🎯 Deployment: Blue/Green with traffic switching"
          echo "📊 CodeDeploy App: mercor-demo-cd-app"
