name: Deploy to ECS

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "README.md"
  workflow_dispatch:  # Allow manual trigger

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mercor-ecs-demo

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Terraform init/plan/apply
        working-directory: terraform/envs/dev
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Grab TF outputs
        id: tf
        working-directory: terraform/envs/dev
        run: |
          echo "ALB=$(terraform output -raw alb_dns)" >> $GITHUB_OUTPUT
          echo "APP=$(terraform output -raw codedeploy_app)" >> $GITHUB_OUTPUT
          echo "DG=$(terraform output -raw codedeploy_deploy_group)" >> $GITHUB_OUTPUT
          echo "EXEC=$(terraform output -raw task_exec_role_arn)" >> $GITHUB_OUTPUT
          echo "CLUSTER=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "SVC=$(terraform output -raw service_name)" >> $GITHUB_OUTPUT

      - name: Register new task definition revision
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          EXEC_ROLE_ARN: ${{ steps.tf.outputs.EXEC }}
        run: |
          # Create updated task definition
          IMG="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          jq --arg IMG "$IMG" --arg REGION "$AWS_REGION" --arg EXEC "$EXEC_ROLE_ARN" \
            '.executionRoleArn=$EXEC | .containerDefinitions[0].image=$IMG | .containerDefinitions[0].logConfiguration.options["awslogs-region"]=$REGION' \
            codedeploy/taskdef.template.json > td.json
          
          # Register the new task definition
          TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://td.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_ARN=$TASK_ARN" >> $GITHUB_ENV

      - name: Create CodeDeploy deployment (blue/green)
        env:
          CODEDEPLOY_APP: ${{ steps.tf.outputs.APP }}
          DEPLOYMENT_GROUP: ${{ steps.tf.outputs.DG }}
        run: |
          # Update appspec with new task definition ARN
          sed "s|<TASK_DEF_ARN>|$TASK_ARN|g" codedeploy/appspec.yaml > appspec.out.yaml
          
          # Create CodeDeploy deployment
          aws codedeploy create-deployment \
            --application-name "$CODEDEPLOY_APP" \
            --deployment-group-name "$DEPLOYMENT_GROUP" \
            --revision revisionType=AppSpecContent,appSpecContent="{\"content\":\"$(base64 -w0 appspec.out.yaml)\"}"

      - name: Verify deployment
        run: |
          echo "Deployment initiated successfully!"
          echo "ALB DNS: ${{ steps.tf.outputs.ALB }}"
          echo "CodeDeploy App: ${{ steps.tf.outputs.APP }}"
          echo "Deployment Group: ${{ steps.tf.outputs.DG }}"
