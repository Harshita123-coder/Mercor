name: Real Infrastructure Variable Test - Zero Downtime

on:
  workflow_dispatch:  # Manual trigger for safety
    inputs:
      test_type:
        description: 'Type of infrastructure variable test'
        required: true
        default: 'capacity_scaling'
        type: choice
        options:
          - capacity_scaling
          - instance_type_change
          - health_check_params
          - container_resources
      revert_changes:
        description: 'Automatically revert changes after test'
        required: true
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mercor-ecs-demo

jobs:
  variable-infrastructure-test:
    name: Real Variable Change Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.2.3"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Record pre-change state
        id: pre-state
        run: |
          echo "🔍 Recording pre-change infrastructure state"
          
          # Check application availability
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          echo "🌐 Pre-change application check:"
          if curl -f "http://$ALB_DNS"; then
            echo "✅ Application accessible"
          else
            echo "❌ Application not accessible - aborting test"
            exit 1
          fi
          
          # Record current infrastructure state
          echo "📊 Current Infrastructure State:"
          echo "ECS Service:"
          aws ecs describe-services \
            --cluster mercor-demo-cluster \
            --services mercor-demo-fargate-svc \
            --query 'services[0].[serviceName,desiredCount,runningCount,pendingCount]' \
            --output table
          
          echo "Auto Scaling Group:"
          aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names mercor-demo-ecs-asg \
            --query 'AutoScalingGroups[0].[DesiredCapacity,MinSize,MaxSize]' \
            --output table 2>/dev/null || echo "No ASG found (using Fargate)"
          
          # Save original variable values
          echo "📝 Saving original terraform variables:"
          cd terraform/envs/dev
          terraform init -input=false >/dev/null 2>&1
          
          # Get current values
          CURRENT_DESIRED=$(grep -A2 "variable.*desired_capacity" variables.tf | grep default | awk '{print $3}')
          CURRENT_MAX=$(grep -A2 "variable.*max_capacity" variables.tf | grep default | awk '{print $3}')
          CURRENT_INSTANCE=$(grep -A2 "variable.*instance_type" variables.tf | grep default | awk -F'"' '{print $2}')
          
          echo "ORIGINAL_DESIRED=$CURRENT_DESIRED" >> $GITHUB_OUTPUT
          echo "ORIGINAL_MAX=$CURRENT_MAX" >> $GITHUB_OUTPUT  
          echo "ORIGINAL_INSTANCE=$CURRENT_INSTANCE" >> $GITHUB_OUTPUT
          echo "START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Make infrastructure variable changes
        id: make-changes
        run: |
          echo "🔧 Making infrastructure variable changes for: ${{ github.event.inputs.test_type }}"
          cd terraform/envs/dev
          
          case "${{ github.event.inputs.test_type }}" in
            "capacity_scaling")
              echo "📈 Testing capacity scaling changes"
              # Change desired capacity from 2 to 3, max from 4 to 6
              sed -i 's/default = 2/default = 3/g' variables.tf
              sed -i 's/default = 4/default = 6/g' variables.tf
              echo "CHANGE_MADE=Scaled desired_capacity: 2→3, max_capacity: 4→6" >> $GITHUB_OUTPUT
              ;;
            "instance_type_change")
              echo "🖥️ Testing instance type change"
              # Change from t3.medium to t3.large
              sed -i 's/t3\.medium/t3.large/g' variables.tf
              echo "CHANGE_MADE=Changed instance_type: t3.medium→t3.large" >> $GITHUB_OUTPUT
              ;;
            "health_check_params")
              echo "🏥 Testing health check parameter changes"
              # Change health check path and add timeout
              sed -i 's|default = "/"|default = "/health"|g' variables.tf
              echo 'variable "health_check_timeout" {\n  type    = number\n  default = 10\n}' >> variables.tf
              echo "CHANGE_MADE=Changed health_path: /→/health, added timeout" >> $GITHUB_OUTPUT
              ;;
            "container_resources")
              echo "🐳 Testing container resource changes"
              # Add container resource variables
              echo 'variable "container_cpu" {\n  type    = number\n  default = 512\n}' >> variables.tf
              echo 'variable "container_memory" {\n  type    = number\n  default = 1024\n}' >> variables.tf
              echo "CHANGE_MADE=Added container_cpu: 512, container_memory: 1024" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "📋 Changes made to variables.tf:"
          git diff variables.tf || echo "No git diff available"

      - name: Start continuous monitoring
        id: start-monitor
        run: |
          echo "🔄 Starting continuous application monitoring..."
          
          # Create monitoring script
          cat > /tmp/monitor_app.sh << 'EOF'
          #!/bin/bash
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          log_file="/tmp/monitoring.log"
          
          echo "$(date): Starting continuous monitoring" > $log_file
          
          total_checks=0
          successful_checks=0
          failed_checks=0
          
          while true; do
            total_checks=$((total_checks + 1))
            
            if curl -f -s --max-time 5 "http://$ALB_DNS" > /dev/null; then
              successful_checks=$((successful_checks + 1))
              echo "$(date): ✅ Check $total_checks - App accessible (Success: $successful_checks, Failed: $failed_checks)" >> $log_file
            else
              failed_checks=$((failed_checks + 1))
              echo "$(date): ❌ Check $total_checks - App NOT accessible (Success: $successful_checks, Failed: $failed_checks)" >> $log_file
            fi
            
            sleep 10
          done
          EOF
          
          chmod +x /tmp/monitor_app.sh
          # Start monitoring in background
          /tmp/monitor_app.sh &
          MONITOR_PID=$!
          echo "MONITOR_PID=$MONITOR_PID" >> $GITHUB_OUTPUT
          echo "🟢 Monitoring started with PID: $MONITOR_PID"
          sleep 5  # Let monitoring start

      - name: Apply terraform changes
        id: terraform-apply
        working-directory: terraform/envs/dev
        run: |
          echo "🚀 Applying infrastructure variable changes with Terraform..."
          
          # Initialize and plan
          terraform init -input=false
          
          echo "📋 Planning changes..."
          if terraform plan -out=tfplan -detailed-exitcode; then
            plan_exit_code=$?
            if [ $plan_exit_code -eq 2 ]; then
              echo "✅ Changes detected, applying..."
              
              # Apply changes
              if terraform apply -auto-approve tfplan; then
                echo "✅ Terraform apply completed successfully"
                echo "TERRAFORM_SUCCESS=true" >> $GITHUB_OUTPUT
              else
                echo "❌ Terraform apply failed"
                echo "TERRAFORM_SUCCESS=false" >> $GITHUB_OUTPUT
                exit 1
              fi
            else
              echo "ℹ️ No changes detected in plan"
              echo "TERRAFORM_SUCCESS=no_changes" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Terraform plan failed"
            echo "TERRAFORM_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Wait for infrastructure stabilization
        run: |
          echo "⏳ Waiting for infrastructure to stabilize after changes..."
          
          max_wait=600  # 10 minutes
          wait_time=0
          
          while [ $wait_time -lt $max_wait ]; do
            # Check ECS service status
            service_status=$(aws ecs describe-services \
              --cluster mercor-demo-cluster \
              --services mercor-demo-fargate-svc \
              --query 'services[0].[runningCount,pendingCount,desiredCount]' \
              --output text 2>/dev/null)
            
            if [ $? -eq 0 ]; then
              running_count=$(echo $service_status | cut -d' ' -f1)
              pending_count=$(echo $service_status | cut -d' ' -f2) 
              desired_count=$(echo $service_status | cut -d' ' -f3)
              
              echo "⏰ Time: ${wait_time}s | ECS: Running: $running_count/$desired_count, Pending: $pending_count"
              
              # Check if service is stable
              if [ "$running_count" = "$desired_count" ] && [ "$pending_count" = "0" ]; then
                echo "✅ ECS service is stable!"
                break
              fi
            else
              echo "⚠️ Could not check ECS service status"
            fi
            
            sleep 20
            wait_time=$((wait_time + 20))
          done

      - name: Stop monitoring and analyze results
        if: always()
        id: analyze
        run: |
          echo "🛑 Stopping monitoring and analyzing results..."
          
          # Stop monitoring process
          MONITOR_PID="${{ steps.start-monitor.outputs.MONITOR_PID }}"
          if [ ! -z "$MONITOR_PID" ]; then
            kill $MONITOR_PID 2>/dev/null || echo "Monitor process already stopped"
          fi
          
          # Wait a moment for final log entries
          sleep 5
          
          # Analyze monitoring results
          if [ -f "/tmp/monitoring.log" ]; then
            echo "📊 Monitoring Results Analysis:"
            echo "================================"
            cat /tmp/monitoring.log
            echo "================================"
            
            total_checks=$(grep -c "Check" /tmp/monitoring.log || echo "0")
            success_count=$(grep -c "✅" /tmp/monitoring.log || echo "0")
            failure_count=$(grep -c "❌" /tmp/monitoring.log || echo "0")
            
            echo "📈 Summary Statistics:"
            echo "Total Checks: $total_checks"
            echo "Successful: $success_count"
            echo "Failed: $failure_count"
            
            if [ "$failure_count" -eq 0 ]; then
              echo "🎉 ZERO DOWNTIME ACHIEVED! No failed checks detected."
              echo "ZERO_DOWNTIME=true" >> $GITHUB_OUTPUT
            else
              if [ "$total_checks" -gt 0 ]; then
                failure_percentage=$((failure_count * 100 / total_checks))
                echo "⚠️ DOWNTIME DETECTED: $failure_count failures out of $total_checks checks ($failure_percentage%)"
              else
                echo "⚠️ DOWNTIME DETECTED: $failure_count failures detected"
              fi
              echo "ZERO_DOWNTIME=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Monitoring log not found"
            echo "ZERO_DOWNTIME=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Revert changes (if requested)
        if: github.event.inputs.revert_changes == 'true' && steps.terraform-apply.outputs.TERRAFORM_SUCCESS == 'true'
        working-directory: terraform/envs/dev
        run: |
          echo "🔄 Reverting infrastructure changes as requested..."
          
          case "${{ github.event.inputs.test_type }}" in
            "capacity_scaling")
              sed -i 's/default = 3/default = 2/g' variables.tf
              sed -i 's/default = 6/default = 4/g' variables.tf
              ;;
            "instance_type_change")
              sed -i 's/t3\.large/t3.medium/g' variables.tf
              ;;
            "health_check_params")
              sed -i 's|default = "/health"|default = "/"|g' variables.tf
              # Remove added variables
              sed -i '/health_check_timeout/,+3d' variables.tf
              ;;
            "container_resources")
              # Remove added variables
              sed -i '/container_cpu/,+3d' variables.tf
              sed -i '/container_memory/,+3d' variables.tf
              ;;
          esac
          
          echo "📋 Applying revert changes..."
          terraform plan -out=revert_plan
          terraform apply -auto-approve revert_plan
          echo "✅ Changes reverted successfully"

      - name: Final verification
        run: |
          echo "🔍 Final infrastructure and application verification:"
          
          # Check application
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          if curl -f "http://$ALB_DNS"; then
            echo "✅ Application accessible after test"
          else
            echo "❌ Application not accessible - test may have caused issues"
          fi
          
          # Show final state
          echo "📊 Final ECS Service State:"
          aws ecs describe-services \
            --cluster mercor-demo-cluster \
            --services mercor-demo-fargate-svc \
            --query 'services[0].[serviceName,status,runningCount,pendingCount,desiredCount]' \
            --output table

      - name: Test Summary Report
        if: always()
        run: |
          echo "📊 REAL INFRASTRUCTURE VARIABLE TEST SUMMARY"
          echo "=============================================="
          echo "⏱️  Start Time: ${{ steps.pre-state.outputs.START_TIME }}"
          echo "⏱️  End Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🎯 Test Type: ${{ github.event.inputs.test_type }}"
          echo "🔧 Change Made: ${{ steps.make-changes.outputs.CHANGE_MADE }}"
          echo "🔄 Auto Revert: ${{ github.event.inputs.revert_changes }}"
          
          # Show terraform status
          terraform_status="${{ steps.terraform-apply.outputs.TERRAFORM_SUCCESS }}"
          echo "🏗️  Terraform Status: $terraform_status"
          
          # Show zero downtime result
          zero_downtime="${{ steps.analyze.outputs.ZERO_DOWNTIME || 'unknown' }}"
          case "$zero_downtime" in
            "true")
              echo "🎉 ZERO DOWNTIME: SUCCESS - No application downtime detected!"
              echo "✅ Test Result: PASSED - Infrastructure changes applied without service interruption"
              ;;
            "false")
              echo "⚠️  DOWNTIME DETECTED: Application was temporarily unavailable"
              echo "❌ Test Result: FAILED - Zero downtime not achieved"
              ;;
            *)
              echo "❓ ZERO DOWNTIME: Unable to determine (monitoring issues)"
              echo "⚠️  Test Result: INCONCLUSIVE"
              ;;
          esac
          
          echo "=============================================="
          
          # Set overall status
          if [ "$terraform_status" = "true" ] && [ "$zero_downtime" = "true" ]; then
            echo "🏆 OVERALL STATUS: SUCCESS - Real zero-downtime infrastructure update achieved!"
          else
            echo "❌ OVERALL STATUS: Test revealed issues that need attention"
          fi