name: Infrastructure Update - Zero Downtime (Fixed)

on:
  push:
    branches: [ main ]
    # Removed paths filter - now runs on every push
  workflow_dispatch:  # Allow manual trigger
    inputs:
      update_type:
        description: 'Type of infrastructure update'
        required: true
        default: 'fargate_service'
        type: choice
        options:
          - fargate_service
          - load_balancer
          - networking
          - security_groups

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mercor-ecs-demo

jobs:
  infrastructure-update:
    name: Zero-Downtime Infrastructure Update
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.2.3"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Record pre-update state
        id: pre-state
        run: |
          echo "🐛 DEBUG: Starting pre-update state check"
          
          # Check current application availability
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          echo "🔍 Pre-update health check:"
          if curl -f "http://$ALB_DNS"; then
            echo "✅ Application accessible"
          else
            echo "❌ Application not accessible"
            exit 1
          fi
          
          # Record current ECS service state (we're using Fargate, not ASG)
          echo "📊 Current ECS Service State:"
          aws ecs describe-services \
            --cluster mercor-demo-cluster \
            --services mercor-demo-fargate-svc \
            --query 'services[0].[serviceName,status,runningCount,pendingCount,desiredCount,platformVersion]' \
            --output table
          
          echo "START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "🐛 DEBUG: Pre-update state check completed"

      - name: Apply infrastructure updates
        id: terraform-apply
        working-directory: terraform/envs/dev
        run: |
          terraform init -input=false
          
          echo "� Checking current Terraform state..."
          terraform refresh -input=false || echo "⚠️ Refresh had issues, continuing..."
          
          echo "�🚀 Planning infrastructure changes..."
          if terraform plan -out=tfplan -detailed-exitcode; then
            plan_exit_code=$?
            if [ $plan_exit_code -eq 2 ]; then
              echo "📋 Changes detected, applying..."
              if terraform apply -auto-approve tfplan; then
                echo "✅ Terraform apply completed successfully"
                echo "TERRAFORM_SUCCESS=true" >> $GITHUB_OUTPUT
              else
                echo "❌ Terraform apply failed"
                echo "TERRAFORM_SUCCESS=false" >> $GITHUB_OUTPUT
                exit 1
              fi
            else
              echo "ℹ️ No changes detected, infrastructure is up to date"
              echo "TERRAFORM_SUCCESS=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Terraform plan failed"
            echo "TERRAFORM_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Monitor service update
        run: |
          echo "🔄 Monitoring ECS Fargate service update..."
          
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          max_wait=600  # 10 minutes for Fargate deployments
          wait_time=0
          consecutive_successes=0
          
          echo "🎯 Monitoring application availability during infrastructure update..."
          
          while [ $wait_time -lt $max_wait ]; do
            # Check ECS service status
            service_status=$(aws ecs describe-services \
              --cluster mercor-demo-cluster \
              --services mercor-demo-fargate-svc \
              --query 'services[0].[runningCount,pendingCount,desiredCount]' \
              --output text)
            
            running_count=$(echo $service_status | cut -d' ' -f1)
            pending_count=$(echo $service_status | cut -d' ' -f2)
            desired_count=$(echo $service_status | cut -d' ' -f3)
            
            # Check application availability
            if curl -f -s "http://$ALB_DNS" > /dev/null; then
              consecutive_successes=$((consecutive_successes + 1))
              echo "✅ Time: ${wait_time}s | Running: $running_count/$desired_count | Pending: $pending_count | App: Accessible (${consecutive_successes} consecutive)"
            else
              consecutive_successes=0
              echo "❌ Time: ${wait_time}s | Running: $running_count/$desired_count | Pending: $pending_count | App: Not accessible"
            fi
            
            # If we have stable service and app is accessible for 3 consecutive checks, we're done
            if [ "$running_count" = "$desired_count" ] && [ "$pending_count" = "0" ] && [ $consecutive_successes -ge 3 ]; then
              echo "🎉 Service is stable and application is consistently accessible!"
              break
            fi
            
            sleep 20
            wait_time=$((wait_time + 20))
          done
          
          if [ $wait_time -ge $max_wait ]; then
            echo "⚠️  Monitoring timeout reached, but continuing with verification..."
          fi

      - name: Verify zero-downtime update
        if: steps.terraform-apply.outputs.TERRAFORM_SUCCESS == 'true'
        run: |
          echo "🔍 Post-update verification:"
          
          # Final health check
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          if curl -f "http://$ALB_DNS"; then
            echo "✅ Application is accessible after update"
          else
            echo "❌ Application failed post-update check"
            exit 1
          fi
          
          # Show final ECS service state
          echo "📊 Final ECS Service State:"
          aws ecs describe-services \
            --cluster mercor-demo-cluster \
            --services mercor-demo-fargate-svc \
            --query 'services[0].[serviceName,status,runningCount,pendingCount,desiredCount,platformVersion,taskDefinition]' \
            --output table
          
          echo "🎉 Zero-downtime infrastructure update completed successfully!"

      - name: Handle terraform failure
        if: steps.terraform-apply.outputs.TERRAFORM_SUCCESS == 'false'
        run: |
          echo "❌ Infrastructure update failed due to Terraform errors"
          echo "🔍 Common issues:"
          echo "  - Resources already exist (need to import to state)"
          echo "  - AWS service subscription required (CodeDeploy)"
          echo "  - Resource conflicts or permission issues"
          echo ""
          echo "💡 Recommendations:"
          echo "  1. Import existing resources to Terraform state"
          echo "  2. Enable required AWS services"
          echo "  3. Use terraform plan to check changes before apply"
          exit 1

      - name: Summary report
        if: always()
        run: |
          echo "📊 Infrastructure Update Summary:"
          echo "⏱️  Start Time: ${{ steps.pre-state.outputs.START_TIME }}"
          echo "⏱️  End Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🎯 Update Type: ${{ github.event.inputs.update_type || 'fargate_service' }}"
          echo "🏗️  Infrastructure: Terraform execution"
          
          # Check if terraform was successful
          terraform_success="${{ steps.terraform-apply.outputs.TERRAFORM_SUCCESS }}"
          if [ "$terraform_success" = "true" ]; then
            echo "⚡ Downtime: Zero (verified via continuous monitoring)"
            echo "🚀 Platform: AWS Fargate (Serverless Containers)"
            echo "✅ Status: Success"
          else
            echo "❌ Terraform Status: Failed"
            echo "⚠️  Infrastructure: May have resource conflicts"
            echo "🔧 Action Required: Check terraform state and import existing resources"
            echo "❌ Status: Failed"
          fi