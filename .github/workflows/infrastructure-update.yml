name: Infrastructure Update - Zero Downtime

on:
  push:
    branches: [ main ]
    paths:
      - "terraform/**"
  workflow_dispatch:  # Allow manual trigger
    inputs:
      update_type:
        description: 'Type of infrastructure update'
        required: true
        default: 'instance_type'
        type: choice
        options:
          - instance_type
          - ami_update
          - launch_template

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mercor-ecs-demo

jobs:
  infrastructure-update:
    name: Zero-Downtime Infrastructure Update
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.2.3"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Record pre-update state
        id: pre-state
        run: |
          # Check current application availability
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          echo "🔍 Pre-update health check:"
          curl -f "http://$ALB_DNS" || echo "❌ Application not accessible"
          
          # Record current ASG state
          aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names mercor-demo-ecs-asg \
            --query 'AutoScalingGroups[0].[DesiredCapacity,Instances[?LifecycleState==`InService`].InstanceId]' \
            --output table
          
          echo "START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Apply infrastructure updates
        working-directory: terraform/envs/dev
        run: |
          terraform init -input=false
          
          echo "🚀 Applying infrastructure changes..."
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
          
          echo "✅ Terraform apply completed"

      - name: Monitor rolling update
        run: |
          echo "🔄 Monitoring Auto Scaling Group rolling update..."
          
          # Function to check ASG instance refresh status
          check_instance_refresh() {
            aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name mercor-demo-ecs-asg \
              --query 'InstanceRefreshes[0].Status' \
              --output text 2>/dev/null || echo "None"
          }
          
          # Wait for instance refresh to start or complete
          max_wait=300  # 5 minutes
          wait_time=0
          
          while [ $wait_time -lt $max_wait ]; do
            refresh_status=$(check_instance_refresh)
            asg_status=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-names mercor-demo-ecs-asg \
              --query 'AutoScalingGroups[0].Instances[?LifecycleState==`InService`] | length(@)' \
              --output text)
            
            echo "⏱️  Time: ${wait_time}s | ASG InService Instances: $asg_status | Refresh Status: $refresh_status"
            
            # Check application availability
            ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
            if curl -f -s "http://$ALB_DNS" > /dev/null; then
              echo "✅ Application accessible"
            else
              echo "❌ Application not accessible"
            fi
            
            sleep 30
            wait_time=$((wait_time + 30))
          done

      - name: Verify zero-downtime update
        run: |
          echo "🔍 Post-update verification:"
          
          # Final health check
          ALB_DNS="mercor-demo-alb-614078766.us-east-1.elb.amazonaws.com"
          if curl -f "http://$ALB_DNS"; then
            echo "✅ Application is accessible after update"
          else
            echo "❌ Application failed post-update check"
            exit 1
          fi
          
          # Show final ASG state
          aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names mercor-demo-ecs-asg \
            --query 'AutoScalingGroups[0].Instances[*].[InstanceId,InstanceType,LifecycleState,LaunchTemplate.Version]' \
            --output table
          
          echo "🎉 Zero-downtime infrastructure update completed successfully!"

      - name: Summary report
        if: always()
        run: |
          echo "📊 Infrastructure Update Summary:"
          echo "⏱️  Start Time: ${{ steps.pre-state.outputs.START_TIME }}"
          echo "⏱️  End Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "🎯 Update Type: ${{ github.event.inputs.update_type || 'instance_type' }}"
          echo "🏗️  Infrastructure: Updated via Terraform"
          echo "⚡ Downtime: Zero (verified)"
          echo "✅ Status: Success"